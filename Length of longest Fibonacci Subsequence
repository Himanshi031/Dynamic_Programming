<-- BRUTE FORCE TC: O(N*N*N) -->
int lenLongestFibSubseq(vector<int>& arr) {
        int n = arr.size();
        int maxLen = 0;

        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int a = arr[i], b = arr[j], length = 2;

                for (int k = j + 1; k < n; k++) {
                    if (arr[k] == a + b) {
                        a = b;
                        b = arr[k];
                        length++;
                    }
                }
                maxLen = max(maxLen, length);
            }
        }
     return maxLen > 2 ? maxLen : 0;
    }

// Dynamic Programming Approach

int lenLongestFibSubseq(vector<int>& arr) {
        int n = arr.size();
        vector<vector<int>> dp(n, vector<int>(n, 0));
        int maxLen = 0;

        for (int curr = 2; curr < n; curr++) {
            int start = 0, end = curr - 1;
            while (start < end) {
                int pairSum = arr[start] + arr[end];
                if (pairSum > arr[curr]) {
                    end--;
                } else if (pairSum < arr[curr]) {
                    start++;
                } else {
                    dp[end][curr] = dp[start][end] + 1;
                    maxLen = max(dp[end][curr], maxLen);
                    end--;
                    start++;
                }
            }
        }
        return maxLen == 0 ? 0 : maxLen + 2;
    }
