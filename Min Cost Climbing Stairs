You are given an integer array cost where cost[i] is the cost of ith step on a staircase. Once you pay the cost, you can either climb one or two steps.
You can either start from the step with index 0, or the step with index 1.
Return the minimum cost to reach the top of the floor.

Example 1:
Input: cost = [10,15,20]
Output: 15
Explanation: You will start at index 1.
- Pay 15 and climb two steps to reach the top.
The total cost is 15.


int minCostClimbingStairs(vector<int>& cost) {

        # DP Solution (1st Approach)
        int n = cost.size();
        vector<int> dp(n + 1);  // dp[i] is minimum cost to reach to i_th floor
        for (int i = 2; i <= n; i++) {
            int jumpOneStep = dp[i - 1] + cost[i - 1];  // Minimum cost if we jump 1 step from floor (i-1)_th to i_th floor
            int jumpTwoStep = dp[i - 2] + cost[i - 2];  // Minimum cost if we jump 2 steps from floor (i-2)_th to i_th floor
            dp[i] = min(jumpOneStep, jumpTwoStep);
        }
        return dp[n];

        # DP Solution (Space Optimization)

        int n = cost.size();
        int dp = 0, dp1 = 0, dp2 = 0;

        for(int i = 2 ; i <= n ; i++){
            int oneStep = dp1 + cost[i - 1];
            int twoStep = dp2 + cost[i - 2];
            dp = min(oneStep, twoStep);
            dp2 = dp1;
            dp1 = dp;
        }
        return dp1;
    }
